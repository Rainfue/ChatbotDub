# backup_model.py
import random

class BackupAssistant:
    '''–õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏'''
    
    def __init__(self):
        self.troubleshooting_steps = [
            '- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–±–µ–ª—è –∫ —Ä–æ—É—Ç–µ—Ä—É',
            '- –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä',
            '- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–≤–∏–∞—Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω',
            '- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS'
        ]
        
        self.keyword_triggers = {
            '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç': 'network',
            '—Å–µ—Ç—å': 'network',
            '—Ä–æ—É—Ç–µ—Ä': 'network',
            'wi-fi': 'network',
            '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ': 'network'
        }

    def is_network_issue(self, text: str) -> bool:
        '''–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–±–ª–µ–º–∞–º —Å–µ—Ç–∏'''
        text_lower = text.lower()
        return any(keyword in text_lower 
                  for keyword in self.keyword_triggers.keys())
                  
    def generate_response(self, text: str) -> str:
        '''–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ç—å—é'''
        if self.is_network_issue(text):
            steps = '\n'.join(random.sample(self.troubleshooting_steps, 3))
            return (
                'üîß –ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. '
                f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n{steps}\n'
                '–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É.'
            )
        return '‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.'
    