import streamlit as st
from text2image import KandinskyAPI
#
from text2text import GigachatAPI
#
from mean_classifier import TextClassifier


import base64
from io import BytesIO
from PIL import Image
# –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
import time

classifier = TextClassifier()
gigachat = GigachatAPI()
kandinsky = KandinskyAPI()
model_id = kandinsky.get_model_id()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
if "messages" not in st.session_state:
    st.session_state.messages = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
def pil_to_base64(image):
    buffered = BytesIO()
    image.save(buffered, format="PNG")
    return base64.b64encode(buffered.getvalue()).decode("utf-8")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
def display_message(message):
    with st.chat_message(message["role"]):
        if message["type"] == "text":
            st.markdown(message["content"])
        elif message["type"] == "image":
            img_bytes = base64.b64decode(message["content"])
            st.image(img_bytes, width=400)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
for message in st.session_state.messages:
    display_message(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
if prompt := st.chat_input("–í–∞—à –≤–æ–ø—Ä–æ—Å..."):
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.session_state.messages.append({
        "role": "user",
        "content": prompt,
        "type": "text"
    })
    with st.chat_message('user'):
        st.markdown(prompt)

    prompt_label = classifier.classify(prompt)
    print(prompt_label)
    if prompt_label == "text answer":
        context = [message['content'] for message in st.session_state.messages if message["type"] == "text"]
        context.append(prompt)
        response = gigachat.generate('\n'.join(context))
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        st.session_state.messages.append({
            "role": "assistant",
            "content": response,
            "type": "text"
        })

    elif prompt_label == "image generation":
        with st.status("üñåÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", expanded=True) as status:
            # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è
            start_time = time.time()
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            generation_uuid = kandinsky.generate(prompt, model_id)
            generation_check = kandinsky.check_generation(generation_uuid)
            status.update(label="–ì–æ—Ç–æ–≤–æ!", state="complete")
            
        if generation_check:
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                # image_data = base64.b64decode(generation_check)
                # image = Image.open(BytesIO(image_data))
                # image_base64 = pil_to_base64(image)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                st.session_state.messages.append({
                    "role": "assistant",
                    "content": generation_check,
                    "type": "image"
                })
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                st.session_state.messages.append({
                    "role": "assistant",
                    "content": f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt} ({time.time() - start_time:.2f}s)",
                    "type": "text"
                })
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        else:
            st.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.rerun()

if st.sidebar.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
    st.session_state.messages = []
    st.rerun()